"""
Esta programa cuenta con dos funciones muy similares, la diferencia es la siguiente:

main() : Coloca en una tabla la comparaci√≥n anual de los tipos de delito
main2() : Coloca en una tabla la comparaci√≥n anual de los subtipos de delito

main2() genera una tabla mucho m√°s grande verticalmente
"""

import numpy as np
import pandas as pd
import plotly.graph_objects as go


# El primer a√±o que se desea comparar
A√ëO1 = 2022

# El segundo a√±o que se desea comparar
A√ëO2 = 2023

# El mes que se desea comparar (la primera letra debe ir en may√∫scula)
MES = "Julio"

# La entidad que se desea comparar (M√©xico para comparar todo el pa√≠s)
ENTIDAD = "M√©xico"

# Fecha para mostrar en la fuente.
FUENTE_FECHA = "(agosto 2023)"


def main():
    # Cargamos el dataset de delitos esttales.
    df = pd.read_csv("./estatal.csv", encoding="latin-1")

    # Si la entidad es M√©xico entonces se calcula a nivel nacional
    # de lo contrario se calcula a nivel estatal
    if ENTIDAD != "M√©xico":
        df = df[df["Entidad"] == ENTIDAD]

    # Creamos un DataFrame para el primer a√±o
    df1 = df[df["A√±o"] == A√ëO1].groupby("Tipo de delito").sum()
    df1 = df1[MES].to_frame(A√ëO1)

    # Creamos un DataFrame para el segundo a√±o
    df2 = df[df["A√±o"] == A√ëO2].groupby("Tipo de delito").sum()
    df2 = df2[MES].to_frame(A√ëO2)

    # Combinamos los DataFrames
    final = pd.concat([df1, df2], axis=1)

    # Agregamos una fila con el conteeo total
    final.loc["Todos los delitos"] = final.sum(axis=0)

    # Ordenamos el DataFrame con los valores del segundo a√±o
    final = final.sort_values(A√ëO2, ascending=False)

    # Calculamos la diferencia y el cambio porcentual entre A√ëO1 y A√ëO2
    final["diff"] = final[A√ëO2] - final[A√ëO1]
    final["change"] = (final[A√ëO2] - final[A√ëO1]) / final[A√ëO1] * 100

    # Preparamos las celdas para su presentaci√≥n
    # Nota: la parte de <sup> es un hack para alinear el texto verticalmente
    final["nombre"] = final.index.map(lambda x: "{}<sup></sup>".format(x))
    final["texto"] = final.apply(format_text, axis=1)
    final[A√ëO1] = final[A√ëO1].apply(lambda x: "{:,.0f}<sup></sup>".format(x))
    final[A√ëO2] = final[A√ëO2].apply(lambda x: "{:,.0f}<sup></sup>".format(x))
    final["color"] = final["diff"].apply(set_color)

    fig = go.Figure()

    fig.add_trace(
        go.Table(
            columnwidth=[250, 50, 50, 60],
            header=dict(
                values=[
                    "<b>Tipo de delito</b>",
                    f"<b>{A√ëO1}</b>",
                    f"<b>{A√ëO2} ‚Üì</b>",
                    "<b>Cambio</b>",
                ],
                font_color="#FFFFFF",
                line_width=0.75,
                fill_color="#116D6E",
                align="center",
            ),
            cells=dict(
                values=[final["nombre"], final[A√ëO1], final[A√ëO2], final["texto"]],
                line_width=0.75,
                fill_color=["#321E1E", "#321E1E", "#321E1E", final["color"]],
                align=["left", "center", "center"],
            ),
        )
    )

    fig.update_layout(
        showlegend=False,
        legend_borderwidth=1.5,
        xaxis_rangeslider_visible=False,
        width=920,
        height=1670,
        font_family="Lato",
        font_color="#FFFFFF",
        font_size=16,
        margin_t=50,
        margin_l=40,
        margin_r=40,
        margin_b=0,
        title_x=0.5,
        title_y=0.988,
        title_font_size=20,
        title_text=f"Comparaci√≥n de delitos reportados en {ENTIDAD} durante {MES.lower()} de los a√±os {A√ëO1} y {A√ëO2}",
        paper_bgcolor="#4E3636",
        annotations=[
            dict(
                x=0.015,
                y=0.005,
                xanchor="left",
                yanchor="top",
                text=f"Fuente: SESNSP {FUENTE_FECHA}",
            ),
            dict(
                x=1.015,
                y=0.005,
                xanchor="right",
                yanchor="top",
                text="üßÅ @lapanquecita",
            ),
        ],
    )

    fig.write_image("./comparacion_tipo_delitos.png")


def main2():
    # Cargamos el dataset de delitos esttales.
    df = pd.read_csv("./estatal.csv", encoding="latin-1")

    # Si la entidad es M√©xico entonces se calcula a nivel nacional
    # de lo contrario se calcula a nivel estatal
    if ENTIDAD != "M√©xico":
        df = df[df["Entidad"] == ENTIDAD]

    # Creamos un DataFrame para el primer a√±o
    df1 = df[df["A√±o"] == A√ëO1].groupby("Subtipo de delito").sum()
    df1 = df1[MES].to_frame(A√ëO1)

    # Creamos un DataFrame para el segundo a√±o
    df2 = df[df["A√±o"] == A√ëO2].groupby("Subtipo de delito").sum()
    df2 = df2[MES].to_frame(A√ëO2)

    # Combinamos los DataFrames
    final = pd.concat([df1, df2], axis=1)

    # Agregamos una fila con el conteeo total
    final.loc["Todos los delitos"] = final.sum(axis=0)

    # Ordenamos el DataFrame con los valores del segundo a√±o
    final = final.sort_values(A√ëO2, ascending=False)

    # Calculamos la diferencia y el cambio porcentual entre A√ëO1 y A√ëO2
    final["diff"] = final[A√ëO2] - final[A√ëO1]
    final["change"] = (final[A√ëO2] - final[A√ëO1]) / final[A√ëO1] * 100

    # Preparamos las celdas para su presentaci√≥n
    # Nota: la parte de <sup> es un hack para alinear el texto verticalmente
    final["nombre"] = final.index.map(lambda x: "{}<sup></sup>".format(x))
    final["texto"] = final.apply(format_text, axis=1)
    final[A√ëO1] = final[A√ëO1].apply(lambda x: "{:,.0f}<sup></sup>".format(x))
    final[A√ëO2] = final[A√ëO2].apply(lambda x: "{:,.0f}<sup></sup>".format(x))
    final["color"] = final["diff"].apply(set_color)

    fig = go.Figure()

    fig.add_trace(
        go.Table(
            columnwidth=[250, 50, 50, 60],
            header=dict(
                values=[
                    "<b>Subtipo de delito</b>",
                    f"<b>{A√ëO1}</b>",
                    f"<b>{A√ëO2} ‚Üì</b>",
                    "<b>Cambio</b>",
                ],
                font_color="#FFFFFF",
                line_width=0.75,
                fill_color="#ad1457",
                align="center",
            ),
            cells=dict(
                values=[final["nombre"], final[A√ëO1], final[A√ëO2], final["texto"]],
                line_width=0.75,
                fill_color=["#041C32", "#041C32", "#041C32", final["color"]],
                align=["left", "center", "center"],
            ),
        )
    )

    fig.update_layout(
        width=920,
        height=2220,
        font_family="Lato",
        font_color="#FFFFFF",
        font_size=16,
        margin_t=50,
        margin_l=40,
        margin_r=40,
        margin_b=0,
        title_x=0.5,
        title_y=0.992,
        title_font_size=20,
        title_text=f"Comparaci√≥n de delitos reportados en {ENTIDAD} durante {MES.lower()} de los a√±os {A√ëO1} y {A√ëO2}",
        paper_bgcolor="#04293A",
        annotations=[
            dict(
                x=0.015,
                y=0.005,
                xanchor="left",
                yanchor="top",
                text=f"Fuente: SESNSP {FUENTE_FECHA}",
            ),
            dict(
                x=1.015,
                y=0.005,
                xanchor="right",
                yanchor="top",
                text="üßÅ @lapanquecita",
            ),
        ],
    )

    fig.write_image("./comparacion_subtipo_delitos.png")


def format_text(x):
    """
    El cambio porcentual puede venir en diferentes formas
    Aqu√≠ las detectamos y formateamos el texto de acorde
    """

    # En caso de que el cambio porcentual sea infinito
    if x["change"] == np.inf:
        return "+{:,.0f} <sup>---</sup>".format(x["diff"])

    # En caso de que el cambio porcentual se nulo
    if pd.isna(x["change"]):
        if x["diff"] == 0.0:
            return "{:,.0f} <sup>---</sup>".format(x["diff"])
        else:
            return "+{:,.0f} <sup>---</sup>".format(x["diff"])

    if x["diff"] > 0:
        return "+{:,.0f} <sup>+{:,.2f}%</sup>".format(x["diff"], x["change"])
    else:
        return "{:,.0f} <sup>{:,.2f}%</sup>".format(x["diff"], x["change"])


def set_color(x):
    """
    Con esta funci√≥n definimos que color de fondo tendr√° la celda del cambio porcentual
    """

    # Rojo para los delitos que aumentaron
    if x > 0:
        return "#8B0000"
    # Verde para los delitos que se redujeron
    elif x < 0:
        return "#1b5e20"
    # Azul para los que se mantuvieron igual
    else:
        return "#084177"


if __name__ == "__main__":
    main()
    # main2()
